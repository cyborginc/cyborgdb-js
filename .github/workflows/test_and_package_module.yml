name: Test and Package CyborgDB
on:
  push:
    branches: ["main"]
    tags:
        - "v*"
            
jobs:
  test_package:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
    
    #   Note: these are commented until tests are fixed
    #   - name: Run tests
    #     run: npm run test:coverage
      
      - name: Build package
        run: npm run build
      
      - name: Pack for testing
        run: npm pack
      
      - name: Test packed package installation
        run: |
          # Create a test directory and install the packed package
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../cyborgdb-*.tgz
          # Verify package can be imported
          node -e "
            try {
              const cyborgdb = require('cyborgdb');
              console.log('Package imported successfully');
              console.log('Package exports:', Object.keys(cyborgdb));
            } catch (error) {
              console.error('Failed to import package:', error.message);
              process.exit(1);
            }
          "

  build_package:
    permissions:
      contents: read
    needs: test_package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Create package tarball
        run: |
          npm pack
          echo "Built package:"
          ls -la *.tgz
      
      - name: Store package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyborgdb-package
          path: "*.tgz"
          retention-days: 5

  publish_to_npm:
    needs: [build_package]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG="${GITHUB_REF#refs/tags/}"
          # Remove 'v' prefix if present
          TAG_VERSION="${TAG#v}"

          echo "Package version: $PACKAGE_VERSION"
          echo "Tag: $TAG"
          echo "Tag version: $TAG_VERSION"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "   package.json: $PACKAGE_VERSION"
            echo "   Git tag: $TAG_VERSION"
            echo ""
            echo "Please update package.json version to match the tag before pushing:"
            echo "   npm version $TAG_VERSION --no-git-tag-version"
            echo "   git add package.json"
            echo "   git commit -m \"Bump version to $TAG_VERSION\""
            exit 1
          fi
          echo "✅ Versions match: $PACKAGE_VERSION"
      
      - name: Build package
        run: npm run build
      
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: cyborgdb-package
      
      - name: Display package info
        run: |
          echo "Package contents:"
          ls -la *.tgz
          npm pack --dry-run
      
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}