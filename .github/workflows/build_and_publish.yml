name: Build and Package CyborgDB
on:
  push:
    branches: ["main"]
    tags:
        - "v*"
            
jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout SDK code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install SDK dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyborgdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout SDK code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Set up Python for server
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Checkout cyborgdb-service repository
        uses: actions/checkout@v4
        with:
          repository: cyborginc/cyborgdb-service
          ref: main
          path: cyborgdb-service
          token: ${{ secrets.CYBORGDB_SERVICE_TOKEN }}
          fetch-depth: 0  # Get full history for version detection
          fetch-tags: true  # Fetch all tags

      - name: Install service dependencies
        run: |
          # Install CPU-only torch
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          # Install optional test dependencies
          pip install sentence-transformers

      - name: Install cyborgdb-service from source
        run: |
          # Install the server from the cloned repository
          pip install ./cyborgdb-service

      - name: Install SDK dependencies
        run: |
          npm ci

      - name: Build SDK
        run: npm run build

      - name: Load Demo API Key
        run: |
          echo "=== Loading Demo API Key ==="

          # Get output and extract only the line that looks like a demo key
          OUTPUT=$(node -e "const { getDemoApiKey } = require('./dist/index.js'); getDemoApiKey().then(key => console.log(key));" 2>&1)

          # Extract the demo key (starts with 'cyborg_demo_')
          CYBORGDB_API_KEY=$(echo "$OUTPUT" | grep -E '^cyborg_demo_[a-zA-Z0-9_-]+$' | head -n 1)

          if [ -z "$CYBORGDB_API_KEY" ]; then
            echo "Error: Failed to generate demo API key"
            echo "Output was: $OUTPUT"
            exit 1
          fi

          echo "CYBORGDB_API_KEY=$CYBORGDB_API_KEY" >> $GITHUB_ENV
          echo "Demo API key loaded successfully"

      - name: Test with Standard version
        run: |
          echo "=== Testing with Standard version ==="
          # Set up environment for Standard
          export CYBORGDB_DB_TYPE=postgres
          export CYBORGDB_CONNECTION_STRING="host=localhost port=5432 dbname=cyborgdb user=postgres password=postgres"
          export CYBORGDB_SERVICE_LOG_LEVEL=DEBUG

          # Start the service with Standard API key
          nohup cyborgdb-service > server-standard.log 2>&1 &
          echo $! > server-standard.pid

          # Wait for service to be ready
          for i in {1..30}; do
            if curl -fs http://localhost:8000/v1/health > /dev/null; then
              echo "Standard service is up!"
              break
            fi
            sleep 1
          done

          if ! curl -fs http://localhost:8000/v1/health > /dev/null; then
            echo "Standard service failed to start"
            cat server-standard.log
            exit 1
          fi

          # Run all tests
          npm run test:coverage

          # Stop standard server
          kill $(cat server-standard.pid) || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  test_package:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Pack for testing
        run: npm pack

      - name: Test packed package installation
        run: |
          # Create a test directory and install the packed package
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../cyborgdb-*.tgz
          # Verify package can be imported
          node -e "
            try {
              const cyborgdb = require('cyborgdb');
              console.log('Package imported successfully');
              console.log('Package exports:', Object.keys(cyborgdb));
            } catch (error) {
              console.error('Failed to import package:', error.message);
              process.exit(1);
            }
          "

  build_package:
    permissions:
      contents: read
    needs: test_package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Create package tarball
        run: |
          npm pack
          echo "Built package:"
          ls -la *.tgz
      
      - name: Store package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyborgdb-package
          path: "*.tgz"
          retention-days: 5

  publish_to_npm:
    needs: [build_package]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    environment: prod
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG="${GITHUB_REF#refs/tags/}"
          # Remove 'v' prefix if present
          TAG_VERSION="${TAG#v}"

          echo "Package version: $PACKAGE_VERSION"
          echo "Tag: $TAG"
          echo "Tag version: $TAG_VERSION"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "   package.json: $PACKAGE_VERSION"
            echo "   Git tag: $TAG_VERSION"
            echo ""
            echo "Please update package.json version to match the tag before pushing:"
            echo "   npm version $TAG_VERSION --no-git-tag-version"
            echo "   git add package.json"
            echo "   git commit -m \"Bump version to $TAG_VERSION\""
            exit 1
          fi
          echo "✅ Versions match: $PACKAGE_VERSION"
      
      - name: Build package
        run: npm run build
      
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: cyborgdb-package
      
      - name: Display package info
        run: |
          echo "Package contents:"
          ls -la *.tgz
          npm pack --dry-run
      
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}