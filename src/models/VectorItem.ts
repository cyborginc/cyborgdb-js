/* tslint:disable */
/* eslint-disable */
/**
 * CyborgDB Service
 * REST API for CyborgDB: The Confidential Vector Database
 *
 * The version of the OpenAPI document: 0.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Contents } from './Contents';
import {
    ContentsFromJSON,
    ContentsFromJSONTyped,
    ContentsToJSON,
    ContentsToJSONTyped,
} from './Contents';

/**
 * Represents a vectorized item for storage in the encrypted index.
 * 
 * Attributes:
 *     id (str): Unique identifier for the vector item.
 *     vector (Optional[List[float]]): The vector representation of the item.
 *     contents (Optional[Union[str, bytes]]): The original text or associated content (can be string or bytes).
 *     metadata (Optional[Dict[str, Any]]): Additional metadata associated with the item.
 * @export
 * @interface VectorItem
 */
export interface VectorItem {
    /**
     * 
     * @type {string}
     * @memberof VectorItem
     */
    id: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof VectorItem
     */
    vector?: Array<number> | null;
    /**
     * 
     * @type {Contents}
     * @memberof VectorItem
     */
    contents?: Contents | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof VectorItem
     */
    metadata?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the VectorItem interface.
 */
export function instanceOfVectorItem(value: object): value is VectorItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function VectorItemFromJSON(json: any): VectorItem {
    return VectorItemFromJSONTyped(json, false);
}

export function VectorItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): VectorItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'vector': json['vector'] == null ? undefined : json['vector'],
        'contents': json['contents'] == null ? undefined : ContentsFromJSON(json['contents']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function VectorItemToJSON(json: any): VectorItem {
    return VectorItemToJSONTyped(json, false);
}

export function VectorItemToJSONTyped(value?: VectorItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'vector': value['vector'],
        'contents': ContentsToJSON(value['contents']),
        'metadata': value['metadata'],
    };
}

