/* tslint:disable */
/* eslint-disable */
/**
 * CyborgDB Service
 * REST API for CyborgDB: The Confidential Vector Database
 *
 * The version of the OpenAPI document: 0.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IndexConfig } from './IndexConfig';
import {
    IndexConfigFromJSON,
    IndexConfigFromJSONTyped,
    IndexConfigToJSON,
    IndexConfigToJSONTyped,
} from './IndexConfig';

/**
 * Request model for creating a new encrypted index.
 * 
 * Attributes:
 *     index_config (Optional[Union[IndexIVFModel, IndexIVFPQModel, IndexIVFFlatModel]]): 
 *         Optional configuration model for the index.
 *     index_key (str): A 32-byte encryption key as a hex string.
 *     index_name (str): The name/identifier of the index.
 *     embedding_model (Optional[str]): Optional embedding model name.
 *     metric (Optional[str]): Optional distance metric.
 * @export
 * @interface CreateIndexRequest
 */
export interface CreateIndexRequest {
    /**
     * 
     * @type {IndexConfig}
     * @memberof CreateIndexRequest
     */
    indexConfig?: IndexConfig | null;
    /**
     * 32-byte encryption key as hex string
     * @type {string}
     * @memberof CreateIndexRequest
     */
    indexKey: string;
    /**
     * ID name
     * @type {string}
     * @memberof CreateIndexRequest
     */
    indexName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIndexRequest
     */
    embeddingModel?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateIndexRequest
     */
    metric?: string | null;
}

/**
 * Check if a given object implements the CreateIndexRequest interface.
 */
export function instanceOfCreateIndexRequest(value: object): value is CreateIndexRequest {
    if (!('indexKey' in value) || value['indexKey'] === undefined) return false;
    if (!('indexName' in value) || value['indexName'] === undefined) return false;
    return true;
}

export function CreateIndexRequestFromJSON(json: any): CreateIndexRequest {
    return CreateIndexRequestFromJSONTyped(json, false);
}

export function CreateIndexRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIndexRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'indexConfig': json['index_config'] == null ? undefined : IndexConfigFromJSON(json['index_config']),
        'indexKey': json['index_key'],
        'indexName': json['index_name'],
        'embeddingModel': json['embedding_model'] == null ? undefined : json['embedding_model'],
        'metric': json['metric'] == null ? undefined : json['metric'],
    };
}

export function CreateIndexRequestToJSON(json: any): CreateIndexRequest {
    return CreateIndexRequestToJSONTyped(json, false);
}

export function CreateIndexRequestToJSONTyped(value?: CreateIndexRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'index_config': IndexConfigToJSON(value['indexConfig']),
        'index_key': value['indexKey'],
        'index_name': value['indexName'],
        'embedding_model': value['embeddingModel'],
        'metric': value['metric'],
    };
}

