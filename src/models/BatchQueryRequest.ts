/* tslint:disable */
/* eslint-disable */
/**
 * CyborgDB Service
 * REST API for CyborgDB: The Confidential Vector Database
 *
 * The version of the OpenAPI document: 0.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request model for batch similarity search.
 * 
 * Inherits:
 *     IndexOperationRequest: Includes `index_name` and `index_key`.
 * 
 * Attributes:
 *     query_vectors (List[List[float]]): List of vectors to search for in batch mode.
 *     top_k (Optional[int]): Number of nearest neighbors to return for each query. Defaults to 100.
 *     n_probes (Optional[int]): Number of lists to probe during the query. Defaults to auto.
 *     greedy (Optional[bool]): Whether to use greedy search. Defaults to False.
 *     filters (Optional[Dict[str, Any]]): JSON-like dictionary specifying metadata filters. Defaults to {}.
 *     include (List[str]): List of additional fields to include in the response. Defaults to `["distance", "metadata"]`.
 * @export
 * @interface BatchQueryRequest
 */
export interface BatchQueryRequest {
    /**
     * 32-byte encryption key as hex string
     * @type {string}
     * @memberof BatchQueryRequest
     */
    indexKey: string;
    /**
     * ID name
     * @type {string}
     * @memberof BatchQueryRequest
     */
    indexName: string;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof BatchQueryRequest
     */
    queryVectors: Array<Array<number>>;
    /**
     * 
     * @type {number}
     * @memberof BatchQueryRequest
     */
    topK?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BatchQueryRequest
     */
    nProbes?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof BatchQueryRequest
     */
    greedy?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BatchQueryRequest
     */
    filters?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BatchQueryRequest
     */
    include?: Array<string>;
}

/**
 * Check if a given object implements the BatchQueryRequest interface.
 */
export function instanceOfBatchQueryRequest(value: object): value is BatchQueryRequest {
    if (!('indexKey' in value) || value['indexKey'] === undefined) return false;
    if (!('indexName' in value) || value['indexName'] === undefined) return false;
    if (!('queryVectors' in value) || value['queryVectors'] === undefined) return false;
    return true;
}

export function BatchQueryRequestFromJSON(json: any): BatchQueryRequest {
    return BatchQueryRequestFromJSONTyped(json, false);
}

export function BatchQueryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchQueryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'indexKey': json['index_key'],
        'indexName': json['index_name'],
        'queryVectors': json['query_vectors'],
        'topK': json['top_k'] == null ? undefined : json['top_k'],
        'nProbes': json['n_probes'] == null ? undefined : json['n_probes'],
        'greedy': json['greedy'] == null ? undefined : json['greedy'],
        'filters': json['filters'] == null ? undefined : json['filters'],
        'include': json['include'] == null ? undefined : json['include'],
    };
}

export function BatchQueryRequestToJSON(json: any): BatchQueryRequest {
    return BatchQueryRequestToJSONTyped(json, false);
}

export function BatchQueryRequestToJSONTyped(value?: BatchQueryRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'index_key': value['indexKey'],
        'index_name': value['indexName'],
        'query_vectors': value['queryVectors'],
        'top_k': value['topK'],
        'n_probes': value['nProbes'],
        'greedy': value['greedy'],
        'filters': value['filters'],
        'include': value['include'],
    };
}

