/* tslint:disable */
/* eslint-disable */
/**
 * CyborgDB Service
 * REST API for CyborgDB: The Confidential Vector Database
 *
 * The version of the OpenAPI document: 0.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QueryRequest } from './QueryRequest';
import {
    QueryRequestFromJSON,
    QueryRequestFromJSONTyped,
    QueryRequestToJSON,
    QueryRequestToJSONTyped,
} from './QueryRequest';
import type { BatchQueryRequest } from './BatchQueryRequest';
import {
    BatchQueryRequestFromJSON,
    BatchQueryRequestFromJSONTyped,
    BatchQueryRequestToJSON,
    BatchQueryRequestToJSONTyped,
} from './BatchQueryRequest';

/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 32-byte encryption key as hex string
     * @type {string}
     * @memberof Request
     */
    indexKey: string;
    /**
     * ID name
     * @type {string}
     * @memberof Request
     */
    indexName: string;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof Request
     */
    queryVectors: Array<Array<number>>;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    queryContents?: string;
    /**
     * 
     * @type {number}
     * @memberof Request
     */
    topK?: number;
    /**
     * 
     * @type {number}
     * @memberof Request
     */
    nProbes?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Request
     */
    greedy?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Request
     */
    filters?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Request
     */
    include?: Array<string>;
}

/**
 * Check if a given object implements the Request interface.
 */
export function instanceOfRequest(value: object): value is Request {
    if (!('indexKey' in value) || value['indexKey'] === undefined) return false;
    if (!('indexName' in value) || value['indexName'] === undefined) return false;
    if (!('queryVectors' in value) || value['queryVectors'] === undefined) return false;
    return true;
}

export function RequestFromJSON(json: any): Request {
    return RequestFromJSONTyped(json, false);
}

export function RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Request {
    if (json == null) {
        return json;
    }
    return {
        
        'indexKey': json['index_key'],
        'indexName': json['index_name'],
        'queryVectors': json['query_vectors'],
        'queryContents': json['query_contents'] == null ? undefined : json['query_contents'],
        'topK': json['top_k'] == null ? undefined : json['top_k'],
        'nProbes': json['n_probes'] == null ? undefined : json['n_probes'],
        'greedy': json['greedy'] == null ? undefined : json['greedy'],
        'filters': json['filters'] == null ? undefined : json['filters'],
        'include': json['include'] == null ? undefined : json['include'],
    };
}

export function RequestToJSON(json: any): Request {
    return RequestToJSONTyped(json, false);
}

export function RequestToJSONTyped(value?: Request | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'index_key': value['indexKey'],
        'index_name': value['indexName'],
        'query_vectors': value['queryVectors'],
        'query_contents': value['queryContents'],
        'top_k': value['topK'],
        'n_probes': value['nProbes'],
        'greedy': value['greedy'],
        'filters': value['filters'],
        'include': value['include'],
    };
}

