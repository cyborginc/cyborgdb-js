/* tslint:disable */
/* eslint-disable */
/**
 * CyborgDB Service
 * REST API for CyborgDB: The Confidential Vector Database
 *
 * The version of the OpenAPI document: 0.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request model for retrieving specific vectors from the index.
 * 
 * Inherits:
 *     IndexOperationRequest: Includes `index_name` and `index_key`.
 * 
 * Attributes:
 *     ids (List[str]): List of vector item IDs to retrieve.
 *     include (List[str]): List of fields to include in the response. 
 *         Defaults to `["vector", "contents", "metadata"]`.
 * @export
 * @interface GetRequest
 */
export interface GetRequest {
    /**
     * 32-byte encryption key as hex string
     * @type {string}
     * @memberof GetRequest
     */
    indexKey: string;
    /**
     * ID name
     * @type {string}
     * @memberof GetRequest
     */
    indexName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRequest
     */
    ids: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRequest
     */
    include?: Array<string>;
}

/**
 * Check if a given object implements the GetRequest interface.
 */
export function instanceOfGetRequest(value: object): value is GetRequest {
    if (!('indexKey' in value) || value['indexKey'] === undefined) return false;
    if (!('indexName' in value) || value['indexName'] === undefined) return false;
    if (!('ids' in value) || value['ids'] === undefined) return false;
    return true;
}

export function GetRequestFromJSON(json: any): GetRequest {
    return GetRequestFromJSONTyped(json, false);
}

export function GetRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'indexKey': json['index_key'],
        'indexName': json['index_name'],
        'ids': json['ids'],
        'include': json['include'] == null ? undefined : json['include'],
    };
}

export function GetRequestToJSON(json: any): GetRequest {
    return GetRequestToJSONTyped(json, false);
}

export function GetRequestToJSONTyped(value?: GetRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'index_key': value['indexKey'],
        'index_name': value['indexName'],
        'ids': value['ids'],
        'include': value['include'],
    };
}

